/*	FileParser		* AS3 Port of Daniel Shiffmans MostPixelsEver - client library		** Uses AIR only filesystem libs	*/package mpe.config {		import flash.filesystem.File;	import flash.filesystem.FileStream;	import flash.filesystem.FileMode;	public class FileParser {				private var fileContent:String = null;		private var _fileExists:Boolean = false;		public function FileParser(filePathS:String){			trace("FileParser: " + filePathS);			var filePath:File = new File(filePathS);			init(filePath);		}				private function init(file:File):void {			if (file.exists) {				try {					fileContent = getIniFile(file);					_fileExists = true;				} catch (e:Error) {					print("I could not load the file " + this.fileContent + ".  Is this the right path?");					trace("ERROR : '" + e.name + "' : " + e.message);					//throw new Error(e.name + "\n" + e.message);				}			}else{				print("Can't find ini file.  Using defaults");			}		}			public function fileExists():Boolean {			return _fileExists;		}		public function getIntValue(attribute:String):int {			var value:int= -1;			if (_fileExists) {				value = parseInitInt(attribute, this.fileContent);			}			return value;		}				public function getStringValue(attribute:String):String {			var value:String = null;			if (_fileExists) {				value = parseInitString(attribute, this.fileContent);			}			return value;		}				public function getIntValues(attribute:String):Vector.<int>{			var value:Vector.<int>; //= (int[])null;			if (_fileExists){				value = parseInitInts(attribute, this.fileContent);			}else{				value = new Vector.<int>([-1, -1]);			}			return value;		}		private function getIniFile(iniFile:File):String {					var fileStream:FileStream = new FileStream();			fileStream.open(iniFile, FileMode.READ);			var inputtext:String = fileStream.readMultiByte(iniFile.size, File.systemCharset);			fileStream.close();						var tagregex:RegExp = new RegExp("#.*\n", "g"); // remove comments			return inputtext.replace(tagregex, "");		}		public function get contents():String { return fileContent; }		private function print(s:String):void {			trace("File Parser: " + s);		}		private function parseInitString(attribute:String, iniFile:String):String {			var parsedInfo:String= null;			var tagregex:RegExp= new RegExp(attribute + "=(.*?);", "i");			var matches:Array = fileContent.match(tagregex);			if(matches != null) {				if (matches.length > 1){					parsedInfo = matches[1];				}			}			return parsedInfo;		}		private function parseInitInt(attribute:String, iniFile:String):int {			var parsedInfo:String= "-1";			var value:int = -1;			var tagregex:RegExp = new RegExp(attribute + "=(.*?);", "i");			var matches:Array = fileContent.match(tagregex);			if(matches != null) {				if (matches.length > 1){					parsedInfo = matches[1];					try{						value = parseInt(parsedInfo);					} catch (e:Error) {						print("Can't parse attribute " + attribute);					}				}			}			return value;		}		private function parseInitInts(attribute:String, iniFile:String):Vector.<int>{			var parsedInfo:String= "-1,-1";			var values:Vector.<int>;			var tagregex:RegExp= new RegExp(attribute + "=(.*?);", "i");			var matches:Array = fileContent.match(tagregex);						if(matches != null) {				if (matches.length > 1){					parsedInfo = matches[1];				}								var splitInfo:Array= parsedInfo.split(",");				values = new Vector.<int>(splitInfo.length, true);				for (var i:int= 0; i < values.length; ++i) {					try {						values[i] = parseInt(splitInfo[i]);					} catch (e:Error) {						values[i] = -1;					}				}						}			return values;		}			}}